import math
import sys

import numpy as np
import torch
from torch.utils.data import Dataset
from sklearn.gaussian_process.kernels import RBF, WhiteKernel
from sklearn.gaussian_process import GaussianProcessRegressor

from neuralproc.utils.helpers import rescale_range

__all__ = ["GPDataset"]


class GPDataset(Dataset):
    """
    Dataset of functions generated by a gaussian process.

    Parameters
    ----------
    kernel : sklearn.gaussian_process.kernels or list
        The kernel specifying the covariance function of the GP. If None is
        passed, the kernel "1.0 * RBF(1.0)" is used as default.

    min_max : tuple of floats, optional
        Min and max point at which to evaluate the function (bounds).

    n_samples : int, optional
        Number of sampled functios contained in dataset.

    n_points : int, optional
        Number of points at which to evaluate f(x) for x in min_max.

    n_diff_kernel_hyp : int, optional
        How many randomly sampled kernel hyperparameters to use per epoch. If
        `n_diff_kernel_hyp = 1` all the samples will be sampled from a fixed kernel.
        If `n_diff_kernel_hyp = n_samples`, every sample will be generated from
        different kernel hyperparameters (will be slow). If not `None` the kernel
        hyperparameters will be uniformly sampled in the bounds `*_bounds` of the
        kernel (note that you should fix ALL hyperparameter bounds).

    kwargs:
        Additional arguments to `GaussianProcessRegressor`.
    """

    def __init__(self,
                 kernel=(WhiteKernel(noise_level=.1, noise_level_bounds=(.1, .5)) +
                         RBF(length_scale=.4, length_scale_bounds=(.1, 1.))),
                 min_max=(-2, 2),
                 n_samples=1000,
                 n_points=100,
                 n_diff_kernel_hyp=1,
                 **kwargs):

        self.n_samples = n_samples
        self.n_points = n_points
        self.min_max = min_max
        self.n_diff_kernel_hyp = n_diff_kernel_hyp
        self._check_n_samples(n_samples)

        if n_diff_kernel_hyp == 1:
            # only fit hyperparam when predicting if using various hyperparam
            kwargs["optimizer"] = None
        self.generator = GaussianProcessRegressor(kernel=kernel,
                                                  alpha=0.001,  # numerical stability for preds
                                                  **kwargs)
        self.data, self.targets = self.precompute_data()

    def _check_n_samples(self, n_samples):
        if n_samples % self.n_diff_kernel_hyp != 0 and n_samples != 1:
            raise ValueError("n_samples={} has to be dividable by n_diff_kernel_hyp={} or 1.".format(n_samples, self.n_diff_kernel_hyp))

    def __len__(self):
        return self.n_samples

    def __getitem__(self, index):
        # doesn't use index because randomly gnerated in any case => sample
        # in order which enables to know when epoch is finished and regenerate
        # new functions
        self.counter += 1
        if self.counter == self.n_samples:
            self.data, self.targets = self.precompute_data()
        return self.data[self.counter], self.targets[self.counter]

    def precompute_data(self):
        self.counter = 0
        X = self._sample_features(self.min_max, self.n_points)
        targets = self._sample_targets(X, self.n_samples)
        X_processed = self._postprocessing_features(X, self.n_samples)
        return X_processed, targets

    def _sample_features(self, min_max, n_points):
        """Sample X with non uniform intervals, by sampling from and adding noise. """
        X = np.linspace(*min_max, n_points)
        # add noise (with standard deviation of "stepsize") to not be on a grid
        X += np.random.randn(*X.shape) * (min_max[1] - min_max[0]) / n_points
        # make sure that still in bound
        X = X.clip(min=min_max[0], max=min_max[1])
        # sort which is convenient for plotting
        X.sort()
        return X

    def _postprocessing_features(self, X, n_samples):
        """Convert the features to a tensor, rescale them to [-1,1] and expand."""
        n_points = len(X)
        X = torch.from_numpy(X)
        X = X.view(1, -1, 1).expand(n_samples, n_points, 1).float()
        X = rescale_range(X, self.min_max, (-1, 1))
        return X

    def _sample_targets(self, X, n_samples):
        n_points = len(X)
        if self.n_diff_kernel_hyp == 1:
            targets = self.generator.sample_y(X[:, np.newaxis], n_samples).transpose(1, 0)
        else:
            if n_samples == 1:
                self.sample_kernel_()
                targets = self.generator.sample_y(X[:, np.newaxis], n_samples
                                                  ).transpose(1, 0)
            else:
                targets = np.empty((n_samples, n_points))
                for i in range(self.n_diff_kernel_hyp):
                    self.sample_kernel_()
                    # interleaves all arrays (maybe better than concat and shuffle)
                    targets[i::self.n_diff_kernel_hyp, :
                            ] = self.generator.sample_y(X[:, np.newaxis],
                                                        n_samples // self.n_diff_kernel_hyp
                                                        ).transpose(1, 0)

        targets = torch.from_numpy(targets)
        targets = targets.view(n_samples, n_points, 1).float()
        return targets

    def sample_kernel_(self):
        """
        Modify inplace the kernel hyperparameters through uniform sampling in their
        respective bounds.
        """
        K = self.generator.kernel
        for hyperparam in K.hyperparameters:
            K.set_params(**{hyperparam.name: np.random.uniform(*hyperparam.bounds.squeeze())})

    def extrapolation_samples(self, n_samples=1, test_min_max=None, n_points=None):
        """Return a batch of extrapolation

        Parameters
        ----------
        n_samples : int, optional
            Number of sampled function (i.e. batch size). Has to be dividable
            by n_diff_kernel_hyp or 1.

        test_min_max : float, optional
            Testing range. If `None` uses training one.

        n_points : int, optional
            Number of points at which to evaluate f(x) for x in min_max. If None
            uses `self.n_points`.
        """
        self._check_n_samples(n_samples)

        if test_min_max is None:
            test_min_max = self.min_max
        n_points = n_points if n_points is not None else self.n_points
        X = self._sample_features(test_min_max, n_points)
        targets = self._sample_targets(X, n_samples)
        X_processed = self._postprocessing_features(X, n_samples)
        return X_processed, targets
